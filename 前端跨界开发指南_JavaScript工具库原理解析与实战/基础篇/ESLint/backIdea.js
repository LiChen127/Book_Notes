/**
 * 静态类型检查工具的实现原理
 */

/**
 * 代码检查是一种静态分析的方法,用于寻找有问题的模式/代码.
 * 码检查工具极大地提高了开发者代码评审的效率，并有效减少了工作量，在享受它带来的便利性的同时，我们也应该思考它是如何实现检查功能的。
 */

/**
 * 编译语言和解释语言
 * 
 * 无论哪一种语言,最后都会在执行之前被翻译成机器码,但是翻译的方式和时机不同
 * 
 * 编译语言: 编写完成后不能直接使用,而是需要先将其编译为计算机可以识别的机器码,这样计算机才可以运行高级语言所实现的功能.提前完成了翻译工作,所以执行速度更快.
 * 缺点: 不同平台可以识别的机器码不同,所需要的编译器也不一样.
 * 高级语言会使用一种称之为字节码的技术将高级语言所编写的程序编译为虚拟机可以识别的中间状态的二进制编码,而将跨平台的兼容性放在虚拟机中来实现, 从而兼顾编程语言的跨平台特性和运行效率.
 * 解释性语言会在执行虚拟机中一边翻译一边执行,所以执行速度较慢.(即时编译: Just-In-Time Compilation)
 * 
 */

/**
 * 编译流程
 * 
 * 1. 分词分析( Lexical Analysis )阶段:
 * 编译器将字符串序列分为若干个具有一定一样的字符串单元,也叫词法单元(token), 分词所依赖的策略会根据不同的语言特点来制定,其结果一般会以数组的形式标记处每个词法单元的类型和原始字符串.
 * 
 * 2. 语法分析( Tokenization )阶段:
 * 语法分析是在词法分析的基础上进行的,他会尝试将词法单元组合成符合一定语法规范的语句,如果语法单元的序列无法拼接成合法的语法,就说明程序存在语法错误.
 * 语法分析的输出结果通常是一个树状结构,称之为抽象语法树(Abstract Syntax Tree, AST)
 * 
 * 3. 遍历分析 ( Traversal Analysis )阶段:
 * 遍历分析是在抽象语法树的基础上进行的，其依据一个自定义的策略集合（可能是语法转换策略，也可能是针对抽象语法树中某些特定类型节点的检查或优化策略）对相应的部分进行操作，我们可以对抽象语法树中的节点进行增删改查操作（如果你已经掌握了一些基本的数据结构和算法知识，就不难意识到，抽象语法树的本质就是树，所有对于树型结构的抽象理论和运算都可以用于抽象语法树）​。
 * 
 * 4. 代码生成( Code Generation )阶段:
 * 在这个阶段中，编译器会将抽象语法树转换为可执行代码，或者一组机器指令，这个过程与使用的平台密切相关，当你在编译参数中指定不同的适用系统时，最终生成的结果通常也不相同。
 * 
 */

// @todo: 看 the-super-tiny-compiler 的实现源码