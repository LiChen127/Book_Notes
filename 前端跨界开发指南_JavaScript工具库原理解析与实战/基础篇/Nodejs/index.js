/**
 * 业界用Node.js做什么
 */

/**
 * 1. 前端工程化
 * 
 * Yeoman: 脚手架开发
 * npm 包
 * webpack: 模块打包工具
 * ESLint: 代码规范检查
 * Prettier: 格式化代码
 * Babel: 代码转换器
 * Mocha, Karma: 测试框架
 * 
 * 多端编译
 */

/**
 * 2. 中间层
 * BFF(Backend For Frontend)
 * 
 * 中间层: 建立在前端和后端的逻辑分层
 * 
 * 中间层的出现，既可以使客户端工程师专注于编写清晰的“声明式组件”代码，也可以使后端工程师在提供相应的业务逻辑接口后，能够专注于系统性能和稳定性的提升，其他的事情则可以放到中间层完成。
 * 
 * 中间层的出现也是“单一职责原则”的体现，它使得整体的技术架构变得更清晰，每个环节需要承担的宏观任务类型也变得更加清晰。客户端负责交互、渲染和状态记录，中间层负责整合连接和清洗数据，后端负责基础服务逻辑、性能和容错。这样的架构能够使不同的模块职责更加清晰，代码的可维护性也会变得更好。
 */

/**
 * 3. SSR
 * SSR(Server Side Render)
 * 
 * 在现代开发中，基于框架的SSR技术也称为同构直出技术。​“同构”是指开发者在服务端开发时，可以使用与客户端开发一样的技术栈并复用同样的组件，三大SPA框架都推出了自己的同构直出框架；​“直出”则是指模板渲染的过程是在服务端完成的，从而将可直接使用的页面、文档片段和脚本返回给客户端。
 * 
 * SSR的优势
 * 
 * 1. 首屏加载速度快
 * 
 * SPA(Single Page Application)的框架具有动态渲染的特点,所以渲染首屏之前往往要进行初始化操作,同时加载其他资源,这就导致首屏加载速度慢。
 * 为了解决这个问题，将首屏内容或经过设计的等待页面放在服务端渲染，并优先展示给用户，可以有效提升用户体验，从而避免用户流失。
 * 
 * 2. 有利于SEO
 * 现代SPA框架的动态渲染特性使其在应对搜索引擎爬虫时表现得很不友好，因为爬虫只能抓取静态页面的内容，而SPA框架的静态HTML页面通常只是一个包含了内容挂载点的空页面。利用服务端技术就可以很好地解决这个问题，当检测到访问者为爬虫机器人时，会返回渲染好的页面，以便它可以分析其中的内容，从而提升网站的搜索引擎优化性能。
 * 
 * 3. 独立于运营页面的制作
 * 运营页面通常是独立于主程序而存在的，其内容会随着运营活动的变化而不断更新，且访问量较大。用SSR技术来实现可以让页面更快地完成构建和渲染，因为它不必加载主程序中那些自己并不依赖的第三方库。同时，运营页面本身就具备时效性，服务端渲染的实现方式也使得它更容易在使用后下架。
 * 
 * 
 * 
 */