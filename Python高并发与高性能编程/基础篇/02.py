# Python 3.X 版本简析

## 2.1 线程实现方式的改进

# 纵观主流的Python实现方式以及CPython虚拟机或Python解释器的实现过程，可以得出，Python对于线程的实现似乎并不是作为一种主要的工作去对待，而是将其作为主分支工作之外的附加分支去处理。

# Python语言全局解释锁的加持，使得线程实现没那么复杂

# 无论什么版本的Python线程模块，都离不开线程实现的主文件——thread.c，该文件是通过C语言实现的，并且其中的定义几乎囊括了Python语言中与线程相关的所有行为，包括线程的组成、线程的创建、线程的生命周期等，而位于thread.c文件下级的所有以.h结尾的文件，都是为了辅助thread.c文件而从Python线程实现中抽离出来的，作为Python线程的辅助实现文件。通过拓展名可以推断出，这些文件都以头文件的形式存在，且都已经被引入线程实现的主文件thread.c中。

## 2.2 线程优先级队列的改进

'''
  每一个线程对象，都具备优先级
  线程的优先级被封装在线程对象中，以线程对象的一个属性的形式存在。
  我们初始化一个Python线程之后，其线程对象就已经具备线程优先级的属性，只不过这个线程对象的优先级属性的值是通过Python虚拟机进行设置的。Python线程对象的优先级属性默认是不开启的，当我们需要用到时可手动设置开启。当我们把多个开启优先级属性的Python线程对象放入一个队列，该队列就可以被称为线程优先级队列了。
'''