# 第一章 Python高级编程所设计到的基础概念

# 1.1 Python中的类
class HelloPython:
  strA = "Hello Python"

  def hello(self):
    print(self.strA)

'''
  Python解释器在解释Python代码时，会先对Python代码进行编译，在编译通过后，才会将编译的Python类字节码文件交给Python虚拟机执行。
'''

# 1.2 Python中的对象
# Python中的对象是对Python中的类进行实例后输出的产物。
# Python中的对象和Python中的基本类型变量在实现方式上是完全不同的。

class ExapleClass:
  NumsA = 6
  NumsB = 8

  def demo(self):
    return self.NumsA + self.NumsB
  
ExapleClassObj = ExapleClass()

'''
  执行了ExapleClass()之后, Python解释器会首先确定与ExampleClass()对应的类型。
  在确定了对应的类的类型之后, Python解释器便和Python虚拟机共同为ExampleClass()类型对象分配一定的内存空间, 从而存储ExampleClass()对象
  我们还赋予了ExampleClass()对象一个变量
  ExampleClass()对象并不会保存对象本身, 而是存储ExampleClass()对象的副本地址，以引用的方式存在
'''

# 1.3 进程与线程

## 1.3.1 进程与线程的区别与联系

'''
  进程(Process)是计算机中的基本存储单元, 是CPU统筹计算机中所有任务的程序实体。
  CPU通过对不同进程的调用、协调位于寄存器, 运算器以及内存中计算机任务的时间片, 使得每个计算机任务都可以得到合理地执行和调用

  线程(Thread)是计算机任务的具体执行者，是操作系统可以进行运算、调度的最小单位。
  线程隶属于一个具体的进程。
  在同一时刻, 一个进程可以拥有一个或者多个线程, 线程是开发者可以直接与计算机CPU/内存进行交互的最小单位

  在操作系统中, 进程指的是CPU调度的程序实体, 线程是具体程序实体的执行者。
  一个进程可以有多个线程, 但是一个线程只能属于一个进程。
  一个线程不可以跨进程存在, 但是一个进程中的线程可以通过技术手段访问或者操作另一个进程中的线程
'''

# 以一个Python程序举例

'''
  一个Python项目可以表示为一个进程
  当启动Py项目时, 会根据Python虚拟机/解释器解析Python, Python虚拟机会创建一个专门用于解析Python代码的主线程, 
  接着会创建一个专门用于执行Python语言所定义的任务的工作线程, 一旦Python项目正常运行起来, 就会有一个主线程和多个工作线程
'''

## 1.3.2 线程的七种状态

''''
  1. 线程创建状态: 该状态表明线程刚刚被创建，还没有被调用或初始化，此时的线程只是一个空的线程对象。
  2. 线程就绪状态: 该状态表明线程已经准备好，等待CPU调度，此时线程已经分配了必要的资源，等待操作系统调度。
  3. 线程运行状态: 线程实际运行的状态，即线程一旦被任务调用，就会从线程就绪状态转变为线程运行状态，且线程一旦进入运行状态，就表明已经开始执行任务了
  4. 线程终止状态: 当线程在运行状态时，由于任务中止或者人为操作等迫使线程停止运行，线程从运行状态转变为中止状态。转变为中止状态的线程，如果没有人为干预，不会自动执行，除非给线程设定一定的饱和策略或其他可恢复线程执行的策略条件。
  5. 线程等待状态: 线程等待状态分为无限期等待状态和限期等待状态。无限期等待表示CPU资源被先前的线程抢占，且先前的线程一直不释放CPU资源，导致当前线程无限期等待下去；限期等待表示先前已经抢占到CPU资源的线程，在过了一定时间后会自动释放CPU资源，当前线程只需要等待一定时间即可获取CPU资源。线程运行状态无论转变为无限期等待状态还是转变为限期等待状态，均需要开发者控制，线程无法自动转换。
  6. 线程阻塞状态: 线程阻塞状态是线程等待状态的一种特殊状态，当线程处于阻塞状态时，线程会一直等待，直到线程被唤醒。
  7. 线程死亡状态: 线程死亡状态是线程的最终状态，当线程处于死亡状态时，线程已经执行完毕，或者线程被强制终止。
'''

# 1.4 多线程与多进程

## 1.4.1 多线程

# 多线程一般指通过技术手段在具体项目中开启两个或两个以上线程，以一起执行任务。

## 1.4.2 多进程

# 多进程一般指通过技术手段，将同一个项目拆分成不同的进程来一起运行项目的现象。

## 1.4.3 多线程的不足

'''
  对于CPython虚拟机来说，多线程是通过切换线程上下文实现的。
  每次线程的上下文切换，都会带来一定的时间消耗，都需要CPython虚拟机去等待执行，这也是使用多线程处理任务必须要花费的时间和成本。

  除了时间成本，在Python项目中将具体代码优化成线程安全的常用手段还是加锁，而一旦给代码解锁，就会带来线程间对于临界区资源的竞争，一旦存在资源的竞争，线程之间就会等待获取锁，从而获取线程所需的资源，这其中也需要一定的时间成本。
'''